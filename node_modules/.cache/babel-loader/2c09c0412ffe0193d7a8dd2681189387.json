{"ast":null,"code":"var _jsxFileName = \"/Users/ivanshvets/react-game/react-game/src/components/Timer.js\";\nimport React, { Component } from \"react\";\nimport Text from \"../components/mainText\";\nimport \"../index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Timer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      Left: parseInt(localStorage.time)\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.left);\n    this.setState({\n      Left: timeLeftVar\n    });\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.left > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds\n    }); // Check if we're at zero.\n\n    if (seconds == 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        classprop: \"main-text\",\n        label: \"left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        classprop: \"bold-text\",\n        label: this.state.left\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Timer;","map":{"version":3,"sources":["/Users/ivanshvets/react-game/react-game/src/components/Timer.js"],"names":["React","Component","Text","Timer","constructor","state","Left","parseInt","localStorage","time","timer","startTimer","bind","countDown","componentDidMount","timeLeftVar","secondsToTime","left","setState","setInterval","seconds","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,OAAO,cAAP;;;AAEA,MAAMC,KAAN,SAAoBH,KAAK,CAACC,SAA1B,CAAoC;AAClCG,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAEC,QAAQ,CAACC,YAAY,CAACC,IAAd;AAAhB,KAAb;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,WAAW,GAAG,KAAKC,aAAL,CAAmB,KAAKX,KAAL,CAAWY,IAA9B,CAAlB;AACA,SAAKC,QAAL,CAAc;AAAEZ,MAAAA,IAAI,EAAES;AAAR,KAAd;AACD;;AAEDJ,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKD,KAAL,IAAc,CAAd,IAAmB,KAAKL,KAAL,CAAWY,IAAX,GAAkB,CAAzC,EAA4C;AAC1C,WAAKP,KAAL,GAAaS,WAAW,CAAC,KAAKN,SAAN,EAAiB,IAAjB,CAAxB;AACD;AACF;;AAEDA,EAAAA,SAAS,GAAG;AACV;AACA,QAAIO,OAAO,GAAG,KAAKf,KAAL,CAAWe,OAAX,GAAqB,CAAnC;AACA,SAAKF,QAAL,CAAc;AACZT,MAAAA,IAAI,EAAE,KAAKO,aAAL,CAAmBI,OAAnB,CADM;AAEZA,MAAAA,OAAO,EAAEA;AAFG,KAAd,EAHU,CAQV;;AACA,QAAIA,OAAO,IAAI,CAAf,EAAkB;AAChBC,MAAAA,aAAa,CAAC,KAAKX,KAAN,CAAb;AACD;AACF;;AAEDY,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWY;AAA9C;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAzCiC;;AA4CpC,eAAed,KAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Text from \"../components/mainText\";\n\nimport \"../index.css\";\n\nclass Timer extends React.Component {\n  constructor() {\n    super();\n    this.state = { Left: parseInt(localStorage.time) };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.left);\n    this.setState({ Left: timeLeftVar });\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.left > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds,\n    });\n\n    // Check if we're at zero.\n    if (seconds == 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Text classprop=\"main-text\" label=\"left\" />\n        <Text classprop=\"bold-text\" label={this.state.left} />\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}